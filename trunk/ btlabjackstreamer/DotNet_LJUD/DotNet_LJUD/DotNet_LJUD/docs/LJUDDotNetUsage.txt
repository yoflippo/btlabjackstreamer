LJUDDotNet Driver Usage
August, 1st 2007

This file will give more information on the specifics of the LJUDDotNet.dll file.

The driver implements a namespace called LabJack.LabJackUD under which everything exists.  The main object inside that namespace is the LJUD object.  That object basically copies the functionality of the LabJackUD.dll driver.  It contains the following enumerated types to act as constants:

LJUDERROR
DEVICE
CONNECTION
IO
CHANNEL
RANGES
TIMERMODE
TIMERCLOCKS
STREAMWAITMODES

Each of these work similarly to that which is found in the header file for the LabJackUD.dll file. 

Where you would use LJ_dtUE9 for the LabJackUD.dll, you would now use LabJackUD.DEVICE.UE9.  LJ_ioANALOG_INPUT would be LabJackUD.IO.ANALOG_INPUT and so on. 

The function then provides static wrappers to the LabJackUD.dll function with the following definitions.

public static LJUDERROR OpenLabJack(DEVICE deviceType, CONNECTION connectionType, String address, bool firstFound, ref int handle)
public static LJUDERROR OpenLabJackS(String deviceType, String connectionType,String address, bool firstFound, ref int handle)
public static LJUDERROR AddRequest(int handle, IO IOType, CHANNEL channel, double val, int x1, double userData)
public static LJUDERROR AddRequestS(int handle, String IOType, CHANNEL channel, double val, int x1, double userData)
public static LJUDERROR AddRequestSS(int handle, String IOType, String channel, double val, int x1, double userData)
public static LJUDERROR AddRequest(int handle, IO IOType, int channel, double val, int x1, double userData)
public static LJUDERROR AddRequestS(int handle, String IOType, int channel, double val, int x1, double userData)
public static LJUDERROR AddRequest(int handle , IO IOType , CHANNEL channel , double val , byte[] x1 , double userData)
public static LJUDERROR AddRequest(int handle , IO IOType , CHANNEL channel , double val , double[] x1 , double userData)
public static LJUDERROR Go()
public static LJUDERROR GoOne(int handle)
public static LJUDERROR eGet(int handle, IO IOType, CHANNEL channel, ref double val, double[] x1)
public static LJUDERROR eGet(int handle, IO IOType, CHANNEL channel, ref double val, int x1)
public static LJUDERROR eGetS(int handle,String IOType, CHANNEL channel, ref double val, int x1)
public static LJUDERROR eGetSS(int handle,String IOType, String channel, ref double val, int x1)
public static LJUDERROR ePut(int handle, IO IOType, CHANNEL channel, double val, int x1)
public static LJUDERROR ePutS(int handle, String IOType, CHANNEL channel, double val, int x1)
public static LJUDERROR ePutSS(int handle, String IOType, String channel, double val, int x1)
public static LJUDERROR GetResult(int handle, IO IOType, CHANNEL channel, ref double val)
public static LJUDERROR GetResultS(int handle, String IOType, CHANNEL channel, ref double val)
public static LJUDERROR GetResultSS(int handle, String IOType, String channel, ref double val)
public static LJUDERROR GetFirstResult(int handle, ref IO IOType, ref CHANNEL channel, ref double val, ref int px1, ref double userData)
public static LJUDERROR GetNextResult(int handle, ref IO IOType,ref CHANNEL channel,ref double val, ref int px1, ref double userData)
public static LJUDERROR ResetLabJack(int handle)
public static LJUDERROR Close()
public static LJUDERROR DoubleToStringAddress(double number, char[] str, int hexDot)
public static LJUDERROR StringToDoubleAddress(String str, ref double number, int hexDot)
public static int StringToConstant(String str)
public static void ErrorToString(ERROR errorCode, char[] str)
public static double GetDriverVersion()
public static LJUDERROR ListAll(DEVICE deviceType, CONNECTION connectionType, ref int numFound, int[] serialNumbers, int[] IDs, double[] addresses)
public static LJUDERROR ListAllS(String deviceType, String connectionType, ref int numFound, int[] serialNumbers, int[] 

The parameters to these functions all work the same as outlined in the LabJackUD users guide.  Some functions have more than one definition to provide support for more than one calling type.  This is needed in .NET because of the strict type system, but not in C++.  One example is 

public static ERROR eGet(int handle, IO IOType, CHANNEL channel, ref double val, double[] x1)
public static ERROR eGet(int handle, IO IOType, CHANNEL channel, ref double val, int x1)

The first eGet function is used for returning an array of doubles, the second is for returning a single value.  If you pass the data type you are expecting, the compiler should be able to identify which function you are calling and handle it appropriately. 

There is also an object in the LabJack.LabJackUD namespace called LabJackUDException.  This object is an Exception object which provides an easier way of doing error handling.  The object has a public LJUD.LJUDERROR error field which can be used to retrieve the error, and a ToString() function that calls LJUD.ErrorToString(error, s) to resolve the value.  Thus, you can do the following to detect errors:

try 
{
	// Add requests
	LJUD.AddRequest(ue9.ljhandle, UE9.IO.ANALOG_INPUT,(UE9.CHANNEL) 0,0,0,0);

	// Execute 
	LJUD.GoOne(ue9.ljhandle);

	// Get result
	LJUD.GetResult(ue9.ljhandle, UE9.IO.ANALOG_INPUT, (UE9.CHANNEL) 0, ref AI0);

}
catch (LabJackUDException e) 
{
	// If error occured print a message box showing which
	MessageBox.Show(this, e.ToString(), "LabjackUD Error #" + (int)e.error);
}


There is also an UE9 object created in the LabJack.LabJackUD namespace that provides a few extra features to make working with the UE9 easier.  The UE9 object inherits from the LJUD object, thus it contains the same static functions you can call.  It also supports the following functions:

controlConfig()
commConfig()
locID()
GetHashCode()
Equals(Object o)

These functions allow you to use the object as a representation as a UE9.  Thus you can use it as an Object in a collection data type or for other purposes. 

The UE9 object has the following public fields defined:

public double localid;
public double powlev;
public double ip;
public double gateway;
public double subnet;
public double porta;
public double portb;
public double dhcp;
public double productid;
public double mac;
public double hwver;
public double cmfwver;
public double pid;
public double sernum;
public double cntpow;
public double cntfwver;
public double blver;
public double rstsrc;


These variables are populated with the correct values from a UE9 by calling the comm and control config functions. There is also a public int ljhandle used to store the handle used to communicate with the device. 

You can communicate with a UE9 by doing

UE9 ue9;
try 
{
    // Open first found over USB
    ue9 = new UE9(LabJackUD.CONNECTION.USB, "0", true);
    ue9.commConfig();
}
catch (LabJackUDException e) 
{
    // If an error occurs print a message box with error
    MessageBox.Show(this, e.ToString(), "LabjackUD Error #" + (int)e.error);
}

MessageBox.Show("Handle: " + ue9.ljhandle + " Local ID:" + ue9.localid);

In addition to the UE9 object, there is also a U3 object created in the LabJack.LabJackUD namespace that provides a few extra features to make working with the U3 easier.  The U3 object inherits from the LJUD object, thus it contains the same static functions you can call.  It also supports the following functions:

U3Config()
locID()
GetHashCode()
Equals(Object o)

These functions allow you to use the object as a representation as a U3.  Thus you can use it as an Object in a collection data type or for other purposes. 

The U3 object has the following public fields defined:

public double bootloaderversion
public double firmwareversion
public double hardwareversion
public int ljhandle
public double localid
public double serialnumber

These variables are populated with the correct values from a U3 by calling the u3Config function. There is also a public int ljhandle used to store the handle used to communicate with the device. 

You can communicate with a U3 by doing

U3 u3;
try 
{
    // Open first found over USB
    u3 = new U3(LabJackUD.CONNECTION.USB, "0", true);
    u3.u3Config();
}
catch (LabJackUDException e) 
{
    // If an error occurs print a message box with error
    MessageBox.Show(this, e.ToString(), "LabjackUD Error #" + (int)e.error);
}

MessageBox.Show("Handle: " + u3.ljhandle + " Local ID:" + u3.localid);

For more examples please refer to the sample applications included in this download. 
